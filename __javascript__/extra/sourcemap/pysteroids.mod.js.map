{
	"version": 3,
	"file": "/Users/stevet/prj/trans/__javascript__/pysteroids.mod.js",
	"sources": [
		"/Users/stevet/prj/trans/pysteroids.py"
	],
	"sourcesContent": [
		"import random\n\nimport org.threejs as three\nfrom controls import Keyboard, ControlAxis\nfrom units import Ship, Asteroid, Bullet\nfrom utils import wrap, now, pad_wrap\n\n\nclass Graphics:\n    def __init__(self, w, h, canvas):\n        self.width = w\n        self.height = h\n        self.scene = three.Scene()\n        self.camera = three.PerspectiveCamera(70, self.width / self.height, 1, 500)\n        self.camera.position.set(0, 0, 50)\n        self.camera.lookAt(self.scene.position)\n        self.renderer = three.WebGLRenderer({'Antialias': True})\n        self.renderer.setSize(self.width, self.height)\n        canvas.appendChild(self.renderer.domElement)\n\n    def render(self):\n        self.renderer.render(self.scene, self.camera)\n\n    def add(self, item):\n        self.scene.add(item.geo)\n\n\nclass Game:\n    def __init__(self, canvas):\n        self.keyboard = Keyboard()\n        self.graphics = Graphics(window.innerWidth, window.innerHeight, canvas)\n        self.create_controls()\n        self.ship = None\n        self.bullets = []\n        self.asteroids = []\n        self.setup()\n        self.last_frame = now()\n\n    def create_controls(self):\n        self.keyboard.add_handler('spin', ControlAxis('s', 'a', attack=1, decay=.6))\n        self.keyboard.add_handler('thrust', ControlAxis('w', 'z', attack=.75, decay=2, deadzone=.1))\n        self.keyboard.add_handler('fire', ControlAxis('q', 'b', attack=10))\n        document.onkeydown = self.keyboard.key_down\n        document.onkeyup = self.keyboard.key_up\n\n    def setup(self):\n\n        self.ship = Ship(self.keyboard, self)\n        self.graphics.add(self.ship)\n\n        def rsign():\n            if random.random() < .5:\n                return -1\n            return 1\n\n        for a in range(10):\n            x = random.randint(-30,30)\n            y = random.randint(-30,30)\n            z = 0\n            r = (random.random() + 1.0) * 2.5\n            asteroid = Asteroid(r, three.Vector3(x, y, z))\n\n            mx = 2.0\n            my = 2.0\n            asteroid.momentum = three.Vector3(mx, my, 0)\n\n            self.graphics.add(asteroid)\n            self.asteroids.append(asteroid)\n\n        for b in range(8):\n            bullet = Bullet()\n            self.graphics.add(bullet)\n            self.bullets.append(bullet)\n\n\n    def tick(self):\n\n        if len(self.asteroids) == 0:\n            print(\"GAME OVER\")\n            document.getElementById(\"ZZ\").innerHTML = \"<h1>GAME OVER</h1>\"\n            return\n\n        requestAnimationFrame(self.tick)\n\n        t = (now() - self.last_frame) / 1000.0\n        self.keyboard.update(t)\n\n        # clean up bullets, check for collisions\n        dead = []\n        for b in self.bullets:\n            if b.position.z < 1000:\n                for a in self.asteroids:\n                    if a.bbox.contains(b.position):\n                        d = a.geo.position.distanceTo(b.position)\n                        if d < a.radius:\n                            b.reset()\n                            dead.append(a)\n        for d in dead:\n            self.asteroids.remove(d)\n            d.geo.visible = False\n            if d.radius > 1.5:\n                new_asteroids = random.randint(2, 5)\n                for n in range(new_asteroids):\n                    new_a = Asteroid((d.radius + 1.0) / new_asteroids, d.position)\n                    xr = random.random()\n                    yr = random.random()\n                    new_a.momentum = three.Vector3().copy(d.momentum)\n                    new_a.momentum.add( three.Vector3(xr, yr, 0))\n                    self.graphics.add(new_a)\n                    self.asteroids.append(new_a)\n\n        for b in self.bullets:\n            b.update(t)\n\n        self.ship.update(t)\n        wrap(self.ship.geo)\n\n        for item in self.asteroids:\n            item.update(t)\n            wrap(item.geo)\n\n        self.graphics.render()\n        self.last_frame = now()\n\n    def fire(self, pos, vector, momentum, t):\n        for each_bullet in self.bullets:\n            if each_bullet.geo.position.z >= 1000:\n                each_bullet.geo.position.set(pos.x, pos.y, pos.z)\n                each_bullet.vector = vector\n                each_bullet.lifespan = 0\n                each_bullet.momentum = three.Vector3().copy(momentum).multiplyScalar(.66)\n                return\n\n\nclass EventQueue:\n    def __init__(self):\n        self.events = {}\n\n    def add_event(self, name, event):\n        self.events[name] = event\n\n    def remove_event(self, name):\n        self.events.pop(name, None)\n\n\nclass Event:\n    def __init__(self, name):\n        self.name = name\n        self.handlers = {}\n\n    def subscribe(self, name, handler):\n        self.handlers[name] = handler\n\n    def unsubscribe(self, name):\n        self.handlers.pop(name, None)\n\n    def fire(self, *args):\n        for k, v in self.handlers.items():\n            v(*args)\n\n\ncanvas = document.getElementById(\"game_canvas\")\ngame = Game(canvas)\ngame.tick()\n"
	],
	"mappings": "AAAA;AAmKA;AAn
}