{
	"version": 3,
	"file": "/Users/stevet/prj/pysteroids/__javascript__/pysteroids.mod.js",
	"sources": [
		"/Users/stevet/prj/pysteroids/pysteroids.py"
	],
	"sourcesContent": [
		"import logging\nimport random\n\nimport org.threejs as three\nfrom controls import Keyboard, ControlAxis\nfrom units import Ship, Asteroid, Bullet\nfrom utils import wrap, now, FPSCounter, timer, coroutine, clamp, set_limits\nimport math\nimport audio\nfrom org.transcrypt.stubs.browser import __pragma__\n\nDEBUG = True\nlogger = logging.getLogger('root')\nlogger.addHandler(logging.StreamHandler())\n\nif DEBUG:\n    logger.setLevel(logging.INFO)\n    logger.info(\"====== debug logging on =====\")\n\n\ndef waiter(*args):\n    return True, args[0]\n\n\ndef done(*args):\n    print(\"done at\", args[0])\n\n\ndef hfov(vfov, w, h):\n    \"\"\"gives horizontal fov (in rads) for given vertical fov (in rads) and aspect ratio\"\"\"\n    return\n\nclass Graphics:\n    def __init__(self, w, h, canvas, fov = 53.13):\n        self.width = float(w)\n        self.height = float(h)\n        self.scene = three.Scene()\n        self.camera = three.PerspectiveCamera(fov, self.width / self.height, 1, 500)\n        self.vfov = math.radians(fov)\n        self.hfov = 2 * math.atan (math.tan( math.radians(fov) / 2.0 ) * (w / h * 1.0))\n\n        self.camera.position.set(0, 0, 80)\n        self.camera.lookAt(self.scene.position)\n        self.renderer = three.WebGLRenderer({'Antialias': True})\n        self.renderer.setSize(self.width, self.height)\n        canvas.appendChild(self.renderer.domElement)\n\n\n    def render(self):\n        self.renderer.render(self.scene, self.camera)\n\n    def add(self, item):\n        self.scene.add(item.geo)\n\n    def extent(self):\n        v_extent = math.tan(self.vfov / 2.0) * 80\n        h_extent = math.tan(self.hfov / 2.0) * 80\n        return h_extent, v_extent\n\n\nclass Audio:\n    def __init__(self, audio_path = \"\"):\n        pth = lambda p: audio_path + p\n\n        self.fire_rota = [audio.clip(pth('344276__nsstudios__laser3.wav')),\n                          audio.clip(pth('344276__nsstudios__laser3.wav')),\n                          audio.clip(pth('344276__nsstudios__laser3.wav')),\n                          audio.clip(pth('344276__nsstudios__laser3.wav'))]\n        self.explosion_rota = [audio.clip(pth('108641__juskiddink__nearby-explosion-with-debris.wav')),\n                               audio.clip(pth('108641__juskiddink__nearby-explosion-with-debris.wav')),\n                               audio.clip(pth('108641__juskiddink__nearby-explosion-with-debris.wav')),\n                               audio.clip(pth('108641__juskiddink__nearby-explosion-with-debris.wav')) ]\n        self.thrust = audio.loop(pth('146770__qubodup__rocket-boost-engine-loop.wav'))\n        self.fail = audio.clip(pth('172950__notr__saddertrombones.mp3'))\n        self.thrust.play()\n        self.shoot_ctr = 0\n        self.explode_ctr = 0\n\n    def fire(self):\n        self.fire_rota[self.shoot_ctr % 4].play()\n        self.shoot_ctr += 1\n\n    def explode(self):\n        self.explosion_rota[self.shoot_ctr % 4].play()\n        self.shoot_ctr += 1\n\n\nclass Game:\n    def __init__(self, canvas, fullscreen=True):\n        self.keyboard = Keyboard()\n        if fullscreen:\n            self.graphics = Graphics(window.innerWidth, window.innerHeight, canvas)\n        else:\n            self.graphics = Graphics(canvas.offsetWidth, (3  * canvas.offsetWidth) / 4, canvas )\n\n        self.extents = self.graphics.extent()\n        set_limits (*self.extents)\n        self.create_controls()\n        self.ship = None\n        self.bullets = []\n        self.asteroids = []\n        self.setup()\n        self.last_frame = now()\n        self.audio = Audio()\n        self.lives = 3\n        self.resetter = None\n        self.score = 0\n        self.score_display = document.getElementById('score')\n        self.fps_counter = FPSCounter(document.getElementById(\"FPS\"))\n\n\n        # adjust the position of the game over div\n        v_center = canvas.offsetHeight / 2\n        title = document.getElementById(\"game_over\")\n        title.style.top = v_center\n        hud = document.getElementById('hud')\n        hud.style.width = canvas.offsetWidth\n        hud.style.height = canvas.offsetHeight\n        frame = document.getElementById('game_frame')\n        frame.style.min_height = canvas.offsetHeight + 64\n\n    def create_controls(self):\n        self.keyboard.add_handler('spin', ControlAxis('ArrowRight', 'ArrowLeft', attack=1, decay=.6))\n        self.keyboard.add_handler('thrust', ControlAxis('ArrowUp', 'ArrowDown', attack=.65, decay=2.5, deadzone=.1))\n        self.keyboard.add_handler('fire', ControlAxis(' ', 'None', attack=10))\n        document.onkeydown = self.keyboard.key_down\n        document.onkeyup = self.keyboard.key_up\n\n        # prevent arrow keys from scrolling browser\n        def suppress_scroll(e):\n            if e.keyCode in [32, 37, 38, 39, 40]:\n                e.preventDefault()\n        window.addEventListener(\"keydown\", suppress_scroll, False)\n\n    def setup(self):\n\n        self.ship = Ship(self.keyboard, self)\n        self.graphics.add(self.ship)\n\n        def rsign():\n            if random.random() < .5:\n                return -1\n            return 1\n\n        for a in range(8):\n            x = (random.random() - 0.5) * 2\n            y = random.random() - 0.5\n            z = 0\n            offset = three.Vector3(x, y, z)\n            offset.normalize();\n            push = random.randint(20, 60)\n            offset = offset.multiplyScalar(push)\n\n            r = (random.random() + 1.0) * 2.5\n            asteroid = Asteroid(r, offset)\n\n            mx = random.random() + random.random() + random.random(2) - 2.0\n            my = random.random() + random.random() + random.random(2) - 2.0\n            asteroid.momentum = three.Vector3(mx, my, 0)\n\n            self.graphics.add(asteroid)\n            self.asteroids.append(asteroid)\n\n        for b in range(8):\n            bullet = Bullet()\n            self.graphics.add(bullet)\n            self.bullets.append(bullet)\n\n    def tick(self):\n\n        if len(self.asteroids) == 0 or self.lives < 1:\n            document.getElementById(\"game_over\").style.visibility = 'visible'\n            document.getElementById('credits').style.visibility = 'visible'\n            return\n\n        requestAnimationFrame(self.tick)\n\n        t = (now() - self.last_frame)\n\n        self.fps_counter.update(t)\n        self.keyboard.update(t)\n\n        # controls\n        if self.ship.visible:\n            self.handle_input(t)\n\n        # clean up bullets, check for collisions\n        dead = []\n        for b in self.bullets:\n            if b.position.z < 1000:\n                for a in self.asteroids:\n                    if a.bbox.contains(b.position):\n                        d = a.geo.position.distanceTo(b.position)\n                        if d < a.radius:\n                            b.reset()\n                            dead.append(a)\n\n        if self.ship.visible:\n            for a in self.asteroids:\n                if a.bbox.contains(self.ship.position):\n                    d = a.geo.position.distanceTo(self.ship.position)\n                    if d < (a.radius + 0.5):\n                        self.resetter = self.kill()\n                        print (\"!!\", self.resetter)\n                        dead.append(a)\n        else:\n            self.resetter.advance(t)\n\n        for d in dead:\n            self.asteroids.remove(d)\n            new_score = int(100 * d.radius)\n            self.update_score(new_score)\n\n            d.geo.visible = False\n            if d.radius > 1.5:\n                self.audio.explode()\n                new_asteroids = random.randint(2, 5)\n                for n in range(new_asteroids):\n                    new_a = Asteroid((d.radius + 1.0) / new_asteroids, d.position)\n                    mx = (random.random() - 0.5) * 6\n                    my = (random.random() - 0.5) * 4\n                    new_a.momentum = three.Vector3().copy(d.momentum)\n                    new_a.momentum.add(three.Vector3(mx, my, 0))\n                    self.graphics.add(new_a)\n                    self.asteroids.append(new_a)\n\n        for b in self.bullets:\n            b.update(t)\n\n        self.ship.update(t)\n        wrap(self.ship.geo)\n\n        for item in self.asteroids:\n            item.update(t)\n            wrap(item.geo)\n\n        if self.resetter is not None:\n            self.resetter.advance(t)\n\n        self.graphics.render()\n        self.last_frame = now()\n\n    def handle_input(self, t):\n\n        if self.keyboard.get_axis('fire') >= 1:\n            mo = three.Vector3().copy(self.ship.momentum).multiplyScalar(t)\n            if self.fire(self.ship.position, self.ship.heading, mo):\n                self.audio.fire()\n            self.keyboard.clear('fire')\n\n        spin = self.keyboard.get_axis('spin')\n        self.ship.spin(spin * t)\n\n        thrust = self.keyboard.get_axis('thrust')\n        self.audio.thrust.volume = clamp(thrust * 5, 0, 1)\n        self.ship.thrust(thrust * t)\n\n    def fire(self, pos, vector, momentum, t):\n        for each_bullet in self.bullets:\n            if each_bullet.geo.position.z >= 1000:\n                each_bullet.geo.position.set(pos.x, pos.y, pos.z)\n                each_bullet.vector = vector\n                each_bullet.lifespan = 0\n                each_bullet.momentum = three.Vector3().copy(momentum).multiplyScalar(.66)\n                return True\n        return False\n\n    def kill(self):\n        self.lives -= 1\n        self.ship.momentum = three.Vector3(0, 0, 0)\n        self.ship.position = three.Vector3(0, 0, 0)\n        self.ship.geo.setRotationFromEuler(three.Euler(0, 0, 0))\n        self.keyboard.clear('spin')\n        self.keyboard.clear('thrust')\n        self.keyboard.clear('fire')\n\n        self.ship.visible = False\n        self.audio.fail.play()\n        can_reappear = now() + 3.0\n\n        def reappear(t):\n            if now() < can_reappear:\n                return True, \"waiting\"\n            for a in self.asteroids:\n                if a.bbox.contains(self.ship.position):\n                    return True, \"can't spawn\"\n            return False, \"OK\"\n\n        def clear_resetter():\n            self.ship.visible = True\n            self.resetter = None\n\n        reset = coroutine(reappear, clear_resetter)\n\n        next(reset)\n        return reset\n\n    def update_score(self, score):\n        self.score += score\n        self.score_display.innerHTML = self.score\n        print(self.score, self.score_display)\n\n\ncanvas = document.getElementById(\"game_canvas\")\ngame = Game(canvas, True)\n\n\ngame.tick()\n\n"
	],
	"mappings": "AAAA;AAmTA;AAAA;AAAA;AAAA;AAn
}