{
	"version": 3,
	"file": "/Users/stevet/prj/pysteroids/__javascript__/units.mod.js",
	"sources": [
		"/Users/stevet/prj/pysteroids/units.py"
	],
	"sourcesContent": [
		"import random\n\nfrom org import threejs as three\nfrom utils import wrap, AABB\n\n\nclass Unit:\n    def __init__(self):\n        self.geo = None\n        self.momentum = three.Vector3(0, 0, 0)\n\n    def get_position(self):\n        return self.geo.position\n\n    def update(self, t):\n        current_pos = self.geo.position\n        move = three.Vector3().copy(self.momentum)\n        move.multiplyScalar(t)\n        self.geo.matrixWorld.setPosition(current_pos.add(move))\n\n    position = property(get_position)\n\n\nclass Ship(Unit):\n    ROTATE_SPEED = 2.1\n    THRUST = .075\n\n    def __init__(self, keyboard, game):\n        Unit.__init__(self)\n        self.keyboard = keyboard\n\n        self.geo = three.Mesh(\n            three.BoxGeometry(2, 3, 2),\n            three.MeshNormalMaterial()\n        )\n        exhaust = three.Mesh(\n            three.BoxGeometry(1, 2, 1),\n            three.MeshBasicMaterial({'color': 0xffff00})\n        )\n        self.geo.add(exhaust)\n        exhaust.translateY(-2)\n        self.exhaust = exhaust\n        self.momentum = three.Vector3(0, 0, 0)\n        self.keyboard = keyboard\n        self.bbox = AABB(2, 2, self.geo.position)\n        self.game = game\n\n    def update(self, t):\n        thrust = self.keyboard.get_axis('thrust')\n        self.geo.rotateZ(self.keyboard.get_axis('spin') * self.ROTATE_SPEED * t * -1)\n\n        if thrust > 0:\n            thrust_amt = thrust * self.THRUST\n            self.momentum = self.momentum.add(self.heading.multiplyScalar(thrust_amt))\n\n        Unit.update(self, t)\n        self.exhaust.visible = thrust > 0\n\n        if self.keyboard.get_axis('fire') >= 1:\n            mo = three.Vector3().copy(self.momentum).multiplyScalar(t)\n            self.game.fire(self.geo.position, self.heading, mo)\n            self.keyboard.clear('fire')\n        self.bbox.update(self.position)\n\n    def get_heading(self) -> float:\n        # return the local Y axis, since Z is 'up'\n        return three.Vector3(self.geo.matrixWorld.elements[4],\n                             self.geo.matrixWorld.elements[5],\n                             self.geo.matrixWorld.elements[6])\n\n    heading = property(get_heading)\n\n\nclass Asteroid(Unit):\n    def __init__(self, radius, pos):\n        Unit.__init__(self)\n        self.radius = radius\n        self.geo = three.Mesh(\n            three.SphereGeometry(self.radius),\n            three.MeshNormalMaterial()\n        )\n        self.geo.position.set(pos.x, pos.y, pos.z)\n        self.bbox = AABB(self.radius * 2, self.radius * 2, self.geo.position)\n        self.momentum = three.Vector3(0, 0, 0)\n\n    def update(self, t):\n        Unit.update(self, t)\n        self.bbox.update(self.position)\n\n\n\nclass Bullet:\n    EXPIRES = 1\n    RESET_POS = three.Vector3(0, 0, 1000)\n    BULLET_SPEED = 50\n\n    def __init__(self):\n        self.vector = three.Vector3(0, 0, 0)\n        self.geo = three.Mesh(\n            three.BoxGeometry(.25, .25, .25),\n            three.MeshBasicMaterial({'color': 0xffffff})\n        )\n        self.lifespan = 0\n        self.momentum = three.Vector3(0, 0, 0)\n        self.reset()\n\n    def update(self, t):\n\n        if self.geo.position.z < 1000:\n            self.lifespan += t\n            if self.lifespan > self.EXPIRES:\n                self.reset()\n                return\n            delta = three.Vector3().copy(self.vector)\n            delta.multiplyScalar(self.BULLET_SPEED * t)\n            delta.add(self.momentum)\n            current_pos = self.geo.position.add(delta)\n            self.geo.position.set(current_pos.x, current_pos.y, current_pos.z)\n            wrap(self.geo)\n\n    def reset(self):\n        self.lifespan = 0\n        self.momentum = three.Vector3(0, 0, 0)\n        self.geo.position.set(self.RESET_POS.x, self.RESET_POS.y, self.RESET_POS.z)\n\n    def get_position(self):\n        return self.geo.position\n\n    position = property(get_position)\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgIA;AAh
}