{
	"version": 3,
	"file": "/Users/stevet/prj/pysteroids/__javascript__/utils.mod.js",
	"sources": [
		"/Users/stevet/prj/pysteroids/utils.py"
	],
	"sourcesContent": [
		"from org import threejs as three\nfrom org.transcrypt.stubs.browser import __pragma__\n\n\ndef pad_wrap(min, max, val):\n    if val < min:\n        return max\n    if val > max:\n        return min\n    return val\n\n\ndef wrap(obj: three.Object3d):\n    XWRAP = 70\n    XNWRAP = -70\n    YWRAP = 35\n    YNWRAP = -35\n\n    x, y, z = obj.position.x, obj.position.y, obj.position.z\n    x = pad_wrap(XNWRAP, XWRAP, x)\n    y = pad_wrap(YNWRAP, YWRAP, y)\n    obj.position.set(x, y, z)\n\n\ndef clamp(val, low, high):\n    return max(min(val, high), low)\n\n\ndef sign(val):\n    if val > 0:\n        return 1\n    if val < 0:\n        return -1\n    return 0\n\n\ndef now():\n    \"\"\"absolute time in decimal seconds\"\"\"\n    d = __new__(Date)\n    return d.getTime() / 1000.0\n\n\ndef set_element(id, value):\n    document.getElementById(id).innerHTML = value\n\n\nclass AABB:\n    def __init__(self, width, height, center):\n        self.hw = width / 2.0\n        self.hh = width / 2.0\n        self.position = center\n\n    def contains(self, item):\n        x = self.position.x\n        y = self.position.y\n        h = self.hh\n        w = self.hw\n        return item.x > x - w and item.x < x + w and item.y > y - h and item.y < y + h\n\n    def update(self, pos):\n        self.position = pos\n\n\nclass FPSCounter:\n    def __init__(self, hud_element):\n        self.frames = [.1]\n        for n in range(99):\n            self.frames.append(.1)\n        self.next_frame = 0\n        self.average = 0\n        self.visible = True\n        self.element = hud_element\n\n    def update(self, t):\n        self.frames[self.next_frame] = t\n        self.next_frame += 1\n        if self.next_frame > 99:\n            self.next_frame = 0\n\n        sum = lambda a, b: a + b\n        total = 0\n        for n in range(100):\n            total += self.frames[n]\n\n        self.average = total * 10\n        if self.visible:\n            # @todo: need a string formatting option to print out decimal MS\n            self.element.innerHTML = \"{} fps\".format(int(1000 / self.average))\n\n\ndef advance(cr, value):\n    \"\"\"used by coroutines for updating without 'gsend' everywhere\"\"\"\n    __pragma__('gsend')\n    cr.send(value)\n    __pragma__('nogsend')\n\n\ndef coroutine(loop, callback):\n\n    callback_fn = callback if callback is not None else lambda a: a\n\n    def coroutine_generator():\n        alive = True\n        result = None\n        while alive:\n            next_value = yield\n            alive, result = loop(next_value)\n            yield result\n        yield callback_fn(result)\n\n    cr =  coroutine_generator()\n    cr.advance = lambda a: advance(cr, a)\n    return cr\n\n\ndef timer(duration, loop, callback):\n    expires_at = now() + duration\n\n    loop_fn = loop if loop is not None else lambda a: (True, a)\n    callback_fn = callback if callback is not None else lambda a: a\n\n    def timer_coroutine():\n        alive = True\n        result = None\n\n        while alive:\n            next_value = yield\n            alive, result = loop_fn(next_value)\n            alive = alive and now() < expires_at\n            yield result\n        yield callback_fn(result)\n\n    tc = timer_coroutine()\n    tc.advance = lambda a: advance(tc, a)\n    return  tc\n\n\n\n\n    # Context managers don't work'\n    # class TestContext:\n    #\n    #     def __init__(self):\n    #         self.x = True\n    #\n    #     def __enter__(self):\n    #         print (\"entering\")\n    #\n    #     def __exit__(self, exc_type, exc_val, exc_tb):\n    #         print (\"exiting\")\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AAEA;AACA;AAAA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAGA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAGA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}